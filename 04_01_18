#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#define shmkey 12345

typedef struct{
  int num;
  int mn1;
  int mn2;
  int mn3;
  int ss1;
  int ss2;
  int ss3;
  int ss;
  int tt;//temps total
  int pit;//pit stop
  int out;//arrêt
  pid_t pid;
} voiture;

voiture *voituresCourse;
voiture copieAffichage[20];


void courseTour(int km) {
  int numVoiture[] = {44,77,5,7,3,33,11,31,18,35,27,55,10,28,8,20,2,14,9,16};
  int i;
  for(i = 0; i <= 19; i++){
    int f = fork();

    if( f == -1){
      perror("Impossible de créer un fils: Erreur fork.\n");
      exit(-1);
    }

    if(f == 0){
      srand(time(0) + getpid());
      int shmid2 = shmget(shmkey, sizeof(voiture), IPC_CREAT | 0666);

      if(shmid2 == -1){
        perror("Création de segment impossible: Erreur shmget du fils.\n");
        exit(-1);
      }

      voituresCourse = (voiture *)shmat(shmid2, 0, 0);
      if(voituresCourse == (voiture*)-1){
        perror("Attachement impossible: Erreur shmat du fils.\n");
        exit(-1);
      }
      int j;
      voituresCourse[i].num = numVoiture[i];
      for(j = 0; j < km; j++){
        int a = rand()%(59 - 35) + 35;
        int b = rand()%(59 - 35) + 35;
        int c = rand()%(59 - 35) + 35;

        int somme = 0;
        somme += a;
        somme += b;
        somme += c;

        int d = rand()%(59 - 35) + 35;
        int e = rand()%(59 - 35) + 35;
        int f = rand()%(59 - 35) + 35;

        int g = d + e + f;
        int h = g%60;
        int l = g/60;
        somme += l;
        if(voituresCourse[i].tt == 0){
          voituresCourse[i].mn1 = a;
          voituresCourse[i].mn2 = b;
          voituresCourse[i].mn3 = c;

          voituresCourse[i].ss1 = d;
          voituresCourse[i].ss2 = e;
          voituresCourse[i].ss3 = f;

          voituresCourse[i].ss = h;
          voituresCourse[i].tt = somme;
          voituresCourse[i].pid = getpid();
        }
        else{
          if(somme < voituresCourse[i].tt){
            voituresCourse[i].mn1 = a;
            voituresCourse[i].mn2 = b;
            voituresCourse[i].mn3 = c;

            voituresCourse[i].ss1 = d;
            voituresCourse[i].ss2 = e;
            voituresCourse[i].ss3 = f;

            voituresCourse[i].ss = h;
            voituresCourse[i].tt = somme;

            voituresCourse[i].pid = getpid();
          }
        }
        sleep(1);
      }
      //il est temps pour le fils de mourrir
      //mais avant il doit se détacher de la memoire partagee
      if(shmdt(voituresCourse) == -1){
        perror("détachement impossible: Erreur shmdt du fils.\n");
        exit(-1);
      }
      //le fils se suicide
      exit(1);
    }
  }
}


void initCourse(){
  int numVoiture[] = {44,77,5,7,3,33,11,31,18,35,27,55,10,28,8,20,2,14,9,16};
  int i;
  for(i = 0; i <= 19; i++){
    voituresCourse[i].num = numVoiture[i];
    voituresCourse[i].mn1 = 0;
    voituresCourse[i].mn2 = 0;
    voituresCourse[i].mn3 = 0;
    voituresCourse[i].tt = 0;
    voituresCourse[i].pid = 0;
  }
}

void trierTab(voiture voitureCopie[20]){
  int i;
  for(i = 0; i <= 19; i++){
    int j;
    for(j = 0; j <=18; j++){
      if(voitureCopie[j].tt > voitureCopie[j+1].tt){
        voiture voit = voitureCopie[j];
        voitureCopie[j]= voitureCopie[j+1];
        voitureCopie[j+1] = voit;
      }
    }
  }
}

int trouverVoitMn1(voiture voitureCopie[20], int mn, int ss){
  int i;
  for(i = 0; i <= 19; i++){
    if(voitureCopie[i].mn1 == mn && voitureCopie[i].ss1 == ss ){
      return voitureCopie[i].num;
    }
  }
  //return 0;
}

int trouverVoitMn2(voiture voitureCopie[20], int mn, int ss){
  int i;
  for(i = 0; i <= 19; i++){
    if(voitureCopie[i].mn2 == mn && voitureCopie[i].ss2 == ss ){
      return voitureCopie[i].num;
    }
  }
  //return 0;
}

int trouverVoitMn3(voiture voitureCopie[20], int mn, int ss){
  int i;
  for(i = 0; i <= 19; i++){
    if(voitureCopie[i].mn3 == mn && voitureCopie[i].ss3 == ss ){
      return voitureCopie[i].num;
    }
  }
  //return 0;
}

int minS1(voiture voitureCopie[20]){
  int i;
  int mnMin = voitureCopie[0].mn1;
  int ssMin = voitureCopie[0].ss1;
  for(i = 1; i <= 19; i++){
    if(voitureCopie[i].mn1 < mnMin){
      mnMin = voitureCopie[i].mn1;
    }
    else if(voitureCopie[i].mn1 == mnMin){
      if(ssMin > voitureCopie[i].ss1){
        ssMin = voitureCopie[i].ss1;
      }
    }
  }
  return trouverVoitMn1(voitureCopie, mnMin, ssMin);
}

int minS2(voiture voitureCopie[20]){
  int i;
  int mnMin = voitureCopie[0].mn2;
  int ssMin = voitureCopie[0].ss2;
  for(i = 1; i <= 19; i++){
    if(voitureCopie[i].mn2 < mnMin){
      mnMin = voitureCopie[i].mn2;
    }
    else if(voitureCopie[i].mn2 == mnMin){
      if(ssMin > voitureCopie[i].ss2){
        ssMin = voitureCopie[i].ss2;
      }
    }
  }
  return trouverVoitMn2(voitureCopie, mnMin, ssMin);
}

int minS3(voiture voitureCopie[20]){
  int i;
  int mnMin = voitureCopie[0].mn3;
  int ssMin = voitureCopie[0].ss3;
  for(i = 1; i <= 19; i++){
    if(voitureCopie[i].mn3 < mnMin){
      mnMin = voitureCopie[i].mn3;
    }
    else if(voitureCopie[i].mn3 == mnMin){
      if(ssMin > voitureCopie[i].ss3){
        ssMin = voitureCopie[i].ss3;
      }
    }
  }
  return trouverVoitMn3(voitureCopie, mnMin, ssMin);
}

void affichage(char str1[]){
  system("clear");
  printf("%s", str1);
  printf("\t|\tS1\t\t|\tS2\t\t|\tS3\t\t|\tTT\t\t|\tPIT\t|\tOUT\t\n\n");
  voiture voitureCopie[20];
  memcpy(&voitureCopie, voituresCourse, 20*sizeof(voiture));
  trierTab(voitureCopie);
  int i;
  for(i = 0; i <= 19; i++){
    int div = voitureCopie[i].tt / 60;
    int res = voitureCopie[i].tt % 60;

    printf("%d\t|\t00:%d:%d mn\t|\t00:%d:%d mn\t|\t00:%d:%d mn\t|\t%d:%d:%d mn\t|\t(P)\t|\tIN\t\n", voitureCopie[i].num, voitureCopie[i].mn1, voitureCopie[i].ss1,
            voitureCopie[i].mn2, voitureCopie[i].ss2, voitureCopie[i].mn3, voitureCopie[i].ss3, div, res, voitureCopie[i].ss);

  }
  printf("\nMeilleur S1: \t%d\n", minS1(voitureCopie));
  printf("Meilleur S2: \t%d\n", minS2(voitureCopie));
  printf("Meilleur S3: \t%d\n", minS3(voitureCopie));
  printf("Meilleur de la course en elle-même: \t%d\n", voitureCopie[0].num);

  sleep(1);
}

void courseSession(char str1[], int trs, int km){
  int i;
  for(i= 0; i<trs; i++){
    courseTour(km);
    affichage(str1);
  }
}

int main(int argc, char *argv[]){
  int shmid = shmget(shmkey, sizeof(voiture), IPC_CREAT | 0666);
  if(shmid == -1){
    perror("Création de segment impossible: Erreur shmget du père.\n");
    exit(-1);
  }

  voituresCourse = (voiture *)shmat(shmid, 0, 0);
  if(voituresCourse == (voiture*)-1){
    perror("Attachement impossible: Erreur shmat du pére.\n");
    exit(-1);
  }

  initCourse();
  courseSession("COURSE P1 : Premiere scéance d'essais !!!\n\n\n", 50, 100);
  printf("%s\n", "\n\nPremière course terminee\n\n\n" );
  sleep(1);
  initCourse();
  courseSession("COURSE P2 : Deuxième scéance d'essais !!!\n\n\n", 30, 50);
  printf("%s\n", "\n\nDeuxieme course terminee\n\n\n" );
  sleep(1);
  initCourse();
  courseSession("COURSE P3 : Troisième scéance d'essais !!!\n\n\n", 30, 50);
  printf("%s\n", "\n\nTroisième course terminee\n\n\n" );
  sleep(1);
  initCourse();

  if(shmdt(voituresCourse) == -1){
    perror("détachement impossible: Erreur shmdt du père.\n");
    exit(-1);
  }

  if(shmctl(shmid, IPC_RMID,  (struct shmid_ds *) NULL) == -1){
    perror("destruction de la memoire partagee n'est pas faite: Erreur shmctl.\n");
    exit(-1);
  }
  exit(1);
  //le père attend la mort du fils
  wait(0);

  return 1;
}
